if game.PlaceId == 17625359962 then
    local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
    local Window = OrionLib:MakeWindow({Name = "Splithware", HidePremium = false, IntroEnabled = false, IntroText = "Splithware", SaveConfig = false, ConfigFolder = "SplithwareConfig"})
    
    local Main = Window:MakeTab({
        Name = "Main",
        Icon = "rbxassetid://0",
        PremiumOnly = false
    })
    
    
    
    local VisualsTab = Window:MakeTab({
        Name = "Visuals",
        Icon = "rbxassetid://0",
        PremiumOnly = false
    })
    
    local FillColor = Color3.fromRGB(255, 255, 255) -- Default color
    local DepthMode = "AlwaysOnTop"
    local FillTransparency = 0.4
    local OutlineColor = Color3.fromRGB(255, 255, 255)
    local OutlineTransparency = 0
    
    local CoreGui = game:FindService("CoreGui")
    local Players = game:FindService("Players")
    local UserInputService = game:FindService("UserInputService")
    local lp = Players.LocalPlayer
    local connections = {}
    local highlightEnabled = true
    
    local Storage = Instance.new("Folder")
    Storage.Parent = CoreGui
    Storage.Name = "Highlight_Storage"
    
    local function Highlight(plr)
        if plr == lp then return end  -- Skip highlight for local player
        local highlight = Storage:FindFirstChild(plr.Name) or Instance.new("Highlight")
        highlight.Name = plr.Name
        highlight.FillColor = FillColor -- Use the selected color
        highlight.DepthMode = DepthMode
        highlight.FillTransparency = FillTransparency
        highlight.OutlineColor = OutlineColor
        highlight.OutlineTransparency = OutlineTransparency
        highlight.Parent = Storage
        
        local function applyHighlightToCharacter(char)
            highlight.Adornee = char
        end
    
        local plrchar = plr.Character or plr.CharacterAdded:Wait()
        applyHighlightToCharacter(plrchar)
    
        if connections[plr] then
            connections[plr]:Disconnect()
        end
    
        connections[plr] = plr.CharacterAdded:Connect(function(char)
            applyHighlightToCharacter(char)
        end)
    end
    
    local function ToggleHighlights()
        highlightEnabled = not highlightEnabled
        if highlightEnabled then
            for _, plr in pairs(Players:GetPlayers()) do
                if not Storage:FindFirstChild(plr.Name) and plr ~= lp then
                    Highlight(plr)
                end
            end
        else
            for _, highlight in pairs(Storage:GetChildren()) do
                highlight:Destroy()
            end
            for _, connection in pairs(connections) do
                connection:Disconnect()
            end
            connections = {}
        end
    end
    
    UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if input.KeyCode == Enum.KeyCode.K and not gameProcessedEvent then
            ToggleHighlights()
        end
    end)
    
    Players.PlayerAdded:Connect(function(plr)
        if highlightEnabled and plr ~= lp then
            Highlight(plr)
        end
    end)
    
    for _, v in pairs(Players:GetPlayers()) do
        if highlightEnabled and v ~= lp then
            Highlight(v)
        end
    end
    
    Players.PlayerRemoving:Connect(function(plr)
        local plrname = plr.Name
        if Storage[plrname] then
            Storage[plrname]:Destroy()
        end
        if connections[plr] then
            connections[plr]:Disconnect()
        end
    end)
    
    -- VisualsTab toggles
    VisualsTab:AddToggle({
        Name = "PlayerEsp",
        Default = false,
        Callback = function(Value)
            ToggleHighlights()
        end    
    })
    
    VisualsTab:AddColorpicker({
        Name = "PlayerEspColor",
        Default = Color3.fromRGB(255, 0, 0),
        Callback = function(Value)
            FillColor = Value -- Update the FillColor when the color picker changes
            -- Update existing highlights with the new color
            for _, highlight in pairs(Storage:GetChildren()) do
                highlight.FillColor = FillColor
            end
        end
    })
    
    
    VisualsTab:AddToggle({
        Name = "HealthBar",
        Default = false,
        Callback = function(Value)
            print("hi")
        end    
    })
    
    VisualsTab:AddToggle({
        Name = "Name",
        Default = false,
        Callback = function(Value)
            print("hi")
        end    
    })
    
    
    
    
    
    
    
    local PlayerTab = Window:MakeTab({
        Name = "Player",
        Icon = "rbxassetid://0",
        PremiumOnly = false
    })
    
    PlayerTab:AddSlider({
        Name = "Speed",
        Min = 0,
        Max = 500,
        Default = 5,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "Speed",
        Callback = function(Value)
            print(Value)
        end    
    })
    
    PlayerTab:AddSlider({
        Name = "Fly",
        Min = 0,
        Max = 500,
        Default = 5,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "Fly",
        Callback = function(Value)
            print(Value)
        end    
    })
    
    
    
    
    end
    OrionLib:Init()
